# -*- coding: utf-8 -*-
"""15분 도시 조성.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11xQD5zajpkn8ki9NWYD_zpnSPvgUNLnt
"""

!pip install folium

from google.colab import drive
drive.mount('/content/gdrive/')

import pandas as pd
import os
path = "/content/gdrive/MyDrive/SW알고리즘/"
LINK_F = pd.read_csv(f"{path}/MOCT_LINK_filtered.csv", encoding="cp949")
NODE_F = pd.read_csv(f"{path}/MOCT_NODE_filtered.csv", encoding="cp949")
SPD_F = pd.read_csv(f"{path}/speed.csv", encoding="cp949")


SPD_DICT = {}
for i in range(SPD_F.shape[0]):
    row = SPD_F.loc[i]
    if row.loc["시작노드"] not in SPD_DICT.keys():
        SPD_DICT[row.loc["시작노드"]] = {}
    SPD_DICT[row.loc["시작노드"]][row.loc["끝노드"]] = {"TIME":row.loc["주행시간"]}


GPS_DICT = {}   
for i in range(NODE_F.shape[0]):
    row = NODE_F.loc[i]
    if row.loc["NODE_ID"] not in GPS_DICT.keys():
        GPS_DICT[row.loc["NODE_ID"]] = []
    GPS_DICT[row.loc["NODE_ID"]] = tuple(list(map(float, (row.loc["geometry"].replace("POINT (", "").replace(")", "").split()))))


ROAD_DICT = {}
for i in range(LINK_F.shape[0]):
    row = LINK_F.loc[i]
    if row.loc["F_NODE"] not in ROAD_DICT.keys():
        ROAD_DICT[row.loc["F_NODE"]] = []
    try:
        ROAD_DICT[row.loc["F_NODE"]] += [{
            "T_NODE" : row.loc["T_NODE"], 
            "TIME" : SPD_DICT[row.loc["F_NODE"]][row.loc["T_NODE"]]["TIME"],
            "GPS" : (GPS_DICT[row.loc["F_NODE"]], GPS_DICT[row.loc["T_NODE"]])
        }]
    except KeyError:
        pass
print(ROAD_DICT)

useable_ls = []
# GPS가 등록된 도로만 걸러내기
for i in ROAD_DICT.keys():
    if ROAD_DICT[i]:
        if ROAD_DICT[i][0]["GPS"]:
            useable_ls.append(i)

import folium
import sys
sys.setrecursionlimit(25000)

#현재 노드에서 남은 시간동안 도달할 수 있는 노드를 ls에 저장한다
def check_reachable_nodes(start_node, current_time=0):
    global k
    k+=1
    print(k)
    for link in ROAD_DICT[start_node]:
        if (start_node,link["T_NODE"]) in visited_link:
            continue
        elif current_time + link["TIME"] < 900:
            visited_link.append((start_node, link["T_NODE"]))
            NODE_TIME[link["T_NODE"]] = current_time + link["TIME"]
            ls.append([link["T_NODE"], link["TIME"], link["GPS"][1]])
            check_reachable_nodes(link["T_NODE"], current_time + link["TIME"])

# NODE = 4060186801
# NODE_TIME = {} #특정 노드에 도달하는데 걸리는 시간 "노드 ID" : "소요 시간"
# print(ROAD_DICT[NODE])
# start_node = ROAD_DICT[NODE][0]["GPS"][0]
# ls=[]
# k = 0
# visited_link = []

# check_reachable_nodes(NODE,0)
# print(len(ls))
# print(ls)
# mpp = folium.Map(location=[33.4, 126.5], tiles='openstreetmap', zoom_start=10)
# for node in ls:
#     folium.Marker(location=[node[2][1], node[2][0]], icon=folium.Icon(color='blue',icon='star')).add_to(mpp)
# folium.Marker(location=[start_node[1], start_node[0]], icon=folium.Icon(color='red',icon='star')).add_to(mpp)

#학교 노드 등록
SCHOOL_F = pd.read_csv(f"{path}/school_data_filtered.csv", encoding="cp949")
elementry_school_ls = []
middle_school_ls = []
high_school_ls = []
for i in range(SCHOOL_F.shape[0]):
  row = SCHOOL_F.loc[i]

  if row.loc["학교급구분"] == "초등학교":
      elementry_school_ls.append((row.loc["학교명"], (row.loc["위도"], row.loc["경도"])))
  elif row.loc["학교급구분"] == "중학교":
      middle_school_ls.append((row.loc["학교명"], (row.loc["위도"], row.loc["경도"])))
  elif row.loc["학교급구분"] == "고등학교":
      high_school_ls.append((row.loc["학교명"], (row.loc["위도"], row.loc["경도"])))
#(학교명, [위도, 경도])



#병원 노드 등록
HOSPITAL_F = pd.read_csv(f"{path}/hospital_data_filtered.csv", encoding="cp949")
hospital_ls = []
for i in range(HOSPITAL_F.shape[0]):
  row = HOSPITAL_F.loc[i]
  loc = list(map(float, row.loc["geometry"].replace("POINT (","").replace(")","").split()))
  hospital_ls.append((None, [loc[1], loc[0]]))
#(None, [위도 경도])

def check_reachable_nodes(start_node, current_time, time_limit):
    for link in ROAD_DICT[start_node]:
        if (start_node,link["T_NODE"]) in visited_link:
            continue
        elif current_time < time_limit: #+ link["TIME"] 
        #else:
            visited_link.append((start_node, link["T_NODE"]))
            visited_nodes_GPS.append(link["GPS"])
            #print(visited_nodes_GPS)
            NODE_TIME[link["T_NODE"]] = current_time + link["TIME"]
            ls.append([link["T_NODE"], link["TIME"], link["GPS"]])
            check_reachable_nodes(link["T_NODE"], current_time + link["TIME"], time_limit)

# 15분 내에 도달 가능한 노드를 찾고, 이를 마커로 표시하는 함수
def draw_all(NODE, time_limit):
  visited_nodes_GPS = []
  try:
    start_node = ROAD_DICT[NODE][0]["GPS"][0]
  except IndexError:
    return
  check_reachable_nodes(NODE,0,time_limit)

  #draw_alphashape(visited_nodes_GPS)
  for link in ls:
      if link not in drawn_links:
          drawn_links.append(link)
          folium.PolyLine(
              locations=[[link[2][0][1], link[2][0][0]], [link[2][1][1], link[2][1][0]]], 
              tooltip="Polyline",
              weight=4,
              popup=(f"{link[0]}, {link[2]}")
          ).add_to(mpp)
      #folium.Circle(location=[node[2][1][1], node[2][1][0]], radius=200, color="red")
  
  
"""
elementry_school_ls : 초등학교
hospital_ls : 병원
"""

import sys
import time
sys.setrecursionlimit(100000)
mpp = folium.Map(location=[33.4, 126.5], tiles='openstreetmap', zoom_start=10)
#4060186801 - 반복
NODE_TIME = {} #특정 노드에 도달하는데 걸리는 시간 "노드 ID" : "소요 시간"

ls=[]
#DFS
k = 0
visited_link = []
drawn_links = []
l = len(middle_school_ls)
for i in range(l):
  school = middle_school_ls[i]
  print(f"{i+1}/{l}, {school[0]}")
  folium.Marker(location=school[1], icon=folium.Icon(color='blue',icon='star'), popup=school[0]).add_to(mpp)
  nodeID, nodeGPS = nearest_node(school[1])
  draw_all(nodeID,900)
mpp

mpp

import sys
import time
sys.setrecursionlimit(100000)
mpp = folium.Map(location=[33.4, 126.5], tiles='openstreetmap', zoom_start=10)
#4060186801 - 반복
NODE_TIME = {} #특정 노드에 도달하는데 걸리는 시간 "노드 ID" : "소요 시간"

ls=[]
#DFS
k = 0
visited_link = []

drawn_links = []

l = len(high_school_ls)

for i in range(l):
  hospital = high_school_ls[i]
  print(f"{i+1}/{l}, {hospital[0]}")
  folium.Marker(location=hospital[1], icon=folium.Icon(color='blue',icon='star'), popup=f"<pre>{hospital[0]}</pre>").add_to(mpp)
  nodeID, nodeGPS = nearest_node(hospital[1])
  draw_all(nodeID,1500)

mpp

# mpp.save("highschool_map.html")